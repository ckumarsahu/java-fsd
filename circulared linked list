class Node {
    int data;
    Node next;

    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class SortedCircularLinkedList {
    private Node head;

    public SortedCircularLinkedList() {
        this.head = null;
    }

    // Method to insert a new element in the sorted circular linked list
    public void insert(int newData) {
        Node newNode = new Node(newData);
        
        // If the list is empty, make the new node the head and point to itself
        if (head == null) {
            head = newNode;
            newNode.next = head;
        } else {
            Node current = head;

            // If the new element is smaller than the head, insert it before the head
            if (newData < head.data) {
                while (current.next != head) {
                    current = current.next;
                }
                current.next = newNode;
                newNode.next = head;
                head = newNode;
            } else {
                // Find the correct position to insert the new element
                while (current.next != head && current.next.data < newData) {
                    current = current.next;
                }
                newNode.next = current.next;
                current.next = newNode;
            }
        }
    }

    // Method to display the elements of the sorted circular linked list
    public void display() {
        if (head == null) {
            System.out.println("List is empty.");
            return;
        }

        Node current = head;

        do {
            System.out.print(current.data + " ");
            current = current.next;
        } while (current != head);

        System.out.println();
    }
}

public class InsertInSortedCircularList {
    public static void main(String[] args) {
        SortedCircularLinkedList circularList = new SortedCircularLinkedList();
        circularList.insert(10);
        circularList.insert(20);
        circularList.insert(30);

        System.out.println("Original Sorted Circular Linked List:");
        circularList.display();

        // Inserting a new element
        int newData = 25;
        circularList.insert(newData);

        System.out.println("Sorted Circular Linked List after inserting " + newData + ":");
        circularList.display();
    }
}
