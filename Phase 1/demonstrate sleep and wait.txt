class SharedResource {
    synchronized void printNumbers() {
        for (int i = 1; i <= 5; i++) {
            System.out.println(Thread.currentThread().getName() + " - " + i);

            // Introducing sleep to simulate some processing time
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    synchronized void printLetters() {
        for (char c = 'A'; c <= 'E'; c++) {
            System.out.println(Thread.currentThread().getName() + " - " + c);

            // Introducing sleep to simulate some processing time
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

public class SleepWaitExample {
    public static void main(String[] args) {
        final SharedResource sharedResource = new SharedResource();

        // Thread 1 - Prints numbers
        Thread t1 = new Thread(() -> {
            sharedResource.printNumbers();
        }, "Thread-1");

        // Thread 2 - Prints letters
        Thread t2 = new Thread(() -> {
            sharedResource.printLetters();
        }, "Thread-2");

        t1.start();
        t2.start();
    }
}
